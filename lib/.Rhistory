newFaName = paste0( "../data/fasta/", kpNums[i], ".fasta" )
system( paste( "mv", files[i], newFaName ) )
}
kpNums
gId = ExtractGenomeNameFromPath( faPath )
sum( !is.na( kpNums ) )
length( cognacTree$tip.label )
dim( sampleKey )
files = c(
GetFilePaths( "../data/genomes", "fa"),
GetFilePaths( "../data/genomes", "fasta")
)
gIds = sapply( sapply( files, ExtractGenomeNameFromPath ), function(x)
{
x = gsub( "_scaffolds", '', x )
x = gsub( "Sample_", '', x )
x = gsub( "_assembly", '', x )
x = gsub( "JV-", '', x )
return( x )
})
files = c(
#WGetFilePaths( "../data/genomes", "fa"),
GetFilePaths( "../data/genomes", "fasta")
)
gIds = sapply( sapply( files, ExtractGenomeNameFromPath ), function(x)
{
x = gsub( "_scaffolds", '', x )
x = gsub( "Sample_", '', x )
x = gsub( "_assembly", '', x )
x = gsub( "JV-", '', x )
return( x )
})
kpNums = sapply( gIds, function(x)
{
isSample = sampleKey$sample_ID == x
if ( !TRUE %in% isSample ) return( NA )
return( sampleKey$Kp_number[ isSample ] )
})
kpNums
isForAnalysis = !is.na( kpNums )
gIds = gIds[ isForAnalysis ]
kpNums = kpNums[ isForAnalysis ]
kpNums
length( kpNums )
fastaFiles = GetFilePaths( "../data/fasta" )
fastaFiles
wziLen = nchar( ParseFasta( "../data/wzi.faa" ) )
wziLen
load( "../data/2021_03_25_blast_analysis.rData" )
i = 1
dim( blastResults[[i]] )
dim( blastResuls[[i]] )
blastResuls[[i]]
N_IDENT = 6
S_SEQ   = 8
j = 1
pId = sapply( 1:nrow( blastResuls[[j]] ),
function(i) blastResuls[[j]][ i, N_IDENT ] / wziLen
)
pId
blastResuls[[j]][ which.max( pId ), S_SEQ ]
faa = sapply( 1:length( blastResuls ), function(j)
{
if ( !length( blastResuls[[j]] ) ) return( NA )
pId = sapply( 1:nrow( blastResuls[[j]] ),
function(i) blastResuls[[j]][ i, N_IDENT ] / wziLen
)
return( blastResuls[[j]][ which.max( pId ), S_SEQ ] )
})
nchar( faa )
length( unique( faa ) )
wziLen
sapply( blastResuls, nrow )
genomeIds = sapply( fastaFiles, ExtractGenomeNameFromPath )
genomeIds
sink( "../analysis/2021_03_25_make_wzi_tree/wzi_alleles.faa" )
for ( i in 1:length( faa ) )
cat( '>', genomeIds[i], '\n', faa[i], '\n' )
sink()
sink( "../analysis/2021_03_25_make_wzi_tree/wzi_alleles.faa" )
for ( i in 1:length( faa ) )
cat( '>', genomeIds[i], '\n', faa[i], '\n', sep = '' )
sink()
faa = gsub( '-', '', faa )
sink( "../analysis/2021_03_25_make_wzi_tree/wzi_alleles.faa" )
for ( i in 1:length( faa ) )
cat( '>', genomeIds[i], '\n', faa[i], '\n', sep = '' )
sink()
cognacTree = read.tree( "../analysis/Bachman_CU8_fastTree_kp_Num_labels.tre" )
wziTree = read.tree( "../analysis/2021_03_25_make_wzi_tree/wzi_fastTree.tre")
nTips = length( lhsTree$tip.label )
PlotCoPhylo( lhsTree, rhsTree )
PlotCoPhylo = function( lhsTree, rhsTree )
{
nTips = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
#creation of the association matrix:
association = cbind( lhsTree$tip.label, rhsTree$tip.label)
cophyloplot(
lhsTree,
rhsTree,
assoc = association,
length.line = 4,
space = 28,
gap = 3,
col = treeCols
)
}
PlotCoPhylo( cognacTree, wzi_tree )
wziTree = read.tree( "../analysis/2021_03_25_make_wzi_tree/wzi_fastTree.tre")
cognacTree = read.tree( "../analysis/Bachman_CU8_fastTree_kp_Num_labels.tre" )
wziTree = read.tree( "../analysis/2021_03_25_make_wzi_tree/wzi_fastTree.tre")
PlotCoPhylo = function( lhsTree, rhsTree )
{
nTips = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
#creation of the association matrix:
association = cbind( lhsTree$tip.label, rhsTree$tip.label)
cophyloplot(
lhsTree,
rhsTree,
assoc = association,
length.line = 4,
space = 28,
gap = 3,
col = treeCols
)
}
PlotCoPhylo( cognacTree, wzi_tree )
PlotCoPhylo( cognacTree, wziTree )
isInRhs = lhsTree$tip.label %in% rhsTree$tip.label
PlotCoPhylo = function( lhsTree, rhsTree )
{
if ( length( lhsTree$tip.label ) != length( rhsTree$tip.label ) )
{
isInRhs = lhsTree$tip.label %in% rhsTree$tip.label
if ( FALSE %in% isInRhs )
{
lhsTree = drop.tip( lhsTree, lhsTree$tip.label[ !isInRhs ] )
}
isInLhs =  rhsTree$tip.label %in% lhsTree$tip.label
if ( FALSE %in% isInRhs )
{
rhsTree = drop.tip( rhsTree, rhsTree$tip.label[ !isInLhs ] )
}
nTips = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
#creation of the association matrix:
association = cbind( lhsTree$tip.label, rhsTree$tip.label)
cophyloplot(
lhsTree,
rhsTree,
assoc = association,
length.line = 4,
space = 28,
gap = 3,
col = treeCols
)
}
PlotCoPhylo( cognacTree, wziTree )
PlotCoPhylo = function( lhsTree, rhsTree )
{
if ( length( lhsTree$tip.label ) != length( rhsTree$tip.label ) )
{
isInRhs = lhsTree$tip.label %in% rhsTree$tip.label
if ( FALSE %in% isInRhs )
{
lhsTree = drop.tip( lhsTree, lhsTree$tip.label[ !isInRhs ] )
}
isInLhs =  rhsTree$tip.label %in% lhsTree$tip.label
if ( FALSE %in% isInRhs )
{
rhsTree = drop.tip( rhsTree, rhsTree$tip.label[ !isInLhs ] )
}
nTips = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
#creation of the association matrix:
association = cbind( lhsTree$tip.label, lhsTree$tip.label )
cophyloplot(
lhsTree,
rhsTree,
assoc = association,
length.line = 4,
space = 28,
gap = 3,
col = treeCols,
show.tip.label = TRUE
)
}
PlotCoPhylo( cognacTree, wziTree )
PlotCoPhylo = function( lhsTree, rhsTree )
{
if ( length( lhsTree$tip.label ) != length( rhsTree$tip.label ) )
{
isInRhs = lhsTree$tip.label %in% rhsTree$tip.label
if ( FALSE %in% isInRhs )
{
lhsTree = drop.tip( lhsTree, lhsTree$tip.label[ !isInRhs ] )
}
isInLhs =  rhsTree$tip.label %in% lhsTree$tip.label
if ( FALSE %in% isInRhs )
{
rhsTree = drop.tip( rhsTree, rhsTree$tip.label[ !isInLhs ] )
}
nTips = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
#creation of the association matrix:
association = cbind( lhsTree$tip.label, lhsTree$tip.label )
cophyloplot(
lhsTree,
rhsTree,
assoc = association,
length.line = 4,
space = 28,
gap = 3,
col = treeCols,
show.tip.label = FALSE
)
}
PlotCoPhylo( cognacTree, wziTree )
PlotCoPhylo = function( lhsTree, rhsTree )
{
if ( length( lhsTree$tip.label ) != length( rhsTree$tip.label ) )
{
isInRhs = lhsTree$tip.label %in% rhsTree$tip.label
if ( FALSE %in% isInRhs )
{
lhsTree = drop.tip( lhsTree, lhsTree$tip.label[ !isInRhs ] )
}
isInLhs =  rhsTree$tip.label %in% lhsTree$tip.label
if ( FALSE %in% isInRhs )
{
rhsTree = drop.tip( rhsTree, rhsTree$tip.label[ !isInLhs ] )
}
nTips = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
#creation of the association matrix:
association = cbind( lhsTree$tip.label, lhsTree$tip.label )
cophyloplot(
lhsTree,
rhsTree,
assoc = association,
length.line = 4,
space = 500,
gap = 3,
col = treeCols,
show.tip.label = FALSE
)
}
PlotCoPhylo( cognacTree, wziTree )
PlotCoPhylo = function( lhsTree, rhsTree )
{
if ( length( lhsTree$tip.label ) != length( rhsTree$tip.label ) )
{
isInRhs = lhsTree$tip.label %in% rhsTree$tip.label
if ( FALSE %in% isInRhs )
{
lhsTree = drop.tip( lhsTree, lhsTree$tip.label[ !isInRhs ] )
}
isInLhs =  rhsTree$tip.label %in% lhsTree$tip.label
if ( FALSE %in% isInRhs )
{
rhsTree = drop.tip( rhsTree, rhsTree$tip.label[ !isInLhs ] )
}
nTips = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
#creation of the association matrix:
association = cbind( lhsTree$tip.label, rhsTree$tip.label )
cophyloplot(
lhsTree,
rhsTree,
assoc = association,
length.line = 4,
space = 500,
gap = 3,
col = treeCols,
show.tip.label = FALSE
)
}
PlotCoPhylo( cognacTree, wziTree )
PlotCoPhylo( midpoint.root( cognacTree ), midpoint.root( wziTree ) )
cognacTree = read.tree( "../analysis/Bachman_CU8_fastTree_kp_Num_labels.tre" )
wziTree = read.tree( "../analysis/2021_03_25_make_wzi_tree/wzi_fastTree.tre")
# ---- Source Functions --------------------------------------------------------
PlotCoPhylo = function( lhsTree, rhsTree )
{
# Get rid of any genomes not in both trees
isInRhs = lhsTree$tip.label %in% rhsTree$tip.label
if ( FALSE %in% isInRhs )
lhsTree = drop.tip( lhsTree, lhsTree$tip.label[ !isInRhs ] )
isInLhs =  rhsTree$tip.label %in% lhsTree$tip.label
if ( FALSE %in% isInRhs )
rhsTree = drop.tip( rhsTree, rhsTree$tip.label[ !isInLhs ] )
# Create a vector with the colors
nTips    = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
# Create an association matrix for the tip lables
association = cbind( lhsTree$tip.label, rhsTree$tip.label )
# Make the plot
cophyloplot(
lhsTree,
rhsTree,
assoc          = association,
length.line    = 4,
space          = 500,
gap            = 3,
col            = treeCols,
show.tip.label = FALSE
)
}
# ------------------------------------------------------------------------------
PlotCoPhylo( midpoint.root( cognacTree ), midpoint.root( wziTree ) )
# ------------------------------------------------------------------------------
isIn = cognacTree$tip.label %in% wziTree$tip.label
cognacTree = drop.tip( cognacTree, cognacTree$tip.label[ !isIn ] )
cgDists   = cophenetic.phylo( cognacTree )
geneDists = cophenetic.phylo( wziTree )
matOrd = sapply( row.names( geneDists ),
function(x) which( row.names( cgDists ) == x )
)
geneDists = geneDists[ order( matOrd ), order( matOrd ) ]
identical( row.names( cgDists ), colnames( geneDists ) )
library( ape )
library( maps )
library( phytools )
# ---- Constant Declarations ---------------------------------------------------
# ---- Variable Initializations ------------------------------------------------
cognacTree = read.tree( "../analysis/Bachman_CU8_fastTree_kp_Num_labels.tre" )
wziTree = read.tree( "../analysis/2021_03_25_make_wzi_tree/wzi_fastTree.tre")
# ---- Source Functions --------------------------------------------------------
PlotCoPhylo = function( lhsTree, rhsTree )
{
# Get rid of any genomes not in both trees
isInRhs = lhsTree$tip.label %in% rhsTree$tip.label
if ( FALSE %in% isInRhs )
lhsTree = drop.tip( lhsTree, lhsTree$tip.label[ !isInRhs ] )
isInLhs =  rhsTree$tip.label %in% lhsTree$tip.label
if ( FALSE %in% isInRhs )
rhsTree = drop.tip( rhsTree, rhsTree$tip.label[ !isInLhs ] )
# Create a vector with the colors
nTips    = length( lhsTree$tip.label )
treeCols = rainbow( nTips )
# Create an association matrix for the tip lables
association = cbind( lhsTree$tip.label, rhsTree$tip.label )
# Make the plot
cophyloplot(
lhsTree,
rhsTree,
assoc          = association,
length.line    = 4,
space          = 500,
gap            = 3,
col            = treeCols,
show.tip.label = FALSE
)
}
# ------------------------------------------------------------------------------
PlotCoPhylo( midpoint.root( cognacTree ), midpoint.root( wziTree ) )
# ------------------------------------------------------------------------------
isIn = cognacTree$tip.label %in% wziTree$tip.label
cognacTree = drop.tip( cognacTree, cognacTree$tip.label[ !isIn ] )
cgDists   = cophenetic.phylo( cognacTree )
geneDists = cophenetic.phylo( wziTree )
matOrd = sapply( row.names( geneDists ),
function(x) which( row.names( cgDists ) == x )
)
geneDists = geneDists[ order( matOrd ), order( matOrd ) ]
identical( row.names( cgDists ), colnames( geneDists ) )
isIn       = cognacTree$tip.label %in% wziTree$tip.label
cognacTree = drop.tip( cognacTree, cognacTree$tip.label[ !isIn ] )
cgDists    = cophenetic.phylo( cognacTree )
geneDists  = cophenetic.phylo( wziTree )
matOrd = sapply( row.names( geneDists ),
function(x) which( row.names( cgDists ) == x )
)
geneDists = geneDists[ order( matOrd ), order( matOrd ) ]
identical( row.names( cgDists ), colnames( geneDists ) )
plot(
x    = as.vector( as.dist( cgDists  ) ),
y    = as.vector( as.dist( geneDists ) ),
col  = "darkblue",
xlab = "Core gene distance",
ylab = "Wzi gene distance",
pch  = 19
)
pheatmap::pheatmap( geneDists )
pheatmap::pheatmap(
geneDists, cluster_rows = FALSE, cluster_cols = FALSE
)
ClusterMatrix = function(
mat,          # Numeric matrix
clusterRows,  # Bool indicating whether rows should be clustered
clusterCols,  # Bool indicating whether cols should be clustered
hClustMethod, # The agglomeration method to be passed to "hClust"
distMethod    # Dstance measure to be used. ex "euclidean", "manhattan", ect
)
{
# ---- Parse the command line arguments ------------------------------------ #
if ( missing(hClustMethod) ) hClustMethod = "complete"
if ( missing(distMethod) )   distMethod   = "euclidean"
# ---- Local Function Defintions ------------------------------------------- #
# Function to cluster the matrix
ApplyClusterFunction = function( mat, distance, clustMethod )
{
# Create the distance matrix
distMat = dist(mat, method = distance)
# Use the distance matrix and apply the clustering function
return( hclust(distMat, clustMethod) )
}
# ---- Apply function to find clusters and sort the matrix ----------------- #
if (clusterRows) # If clustering by rows...
{
treeRow = ApplyClusterFunction(mat, distMethod, hClustMethod)
mat = mat[treeRow$order, , drop = FALSE]
}
if (clusterCols) # If clustering by columns...
{
treeCol = ApplyClusterFunction(t(mat), distMethod, hClustMethod)
mat = mat[, treeCol$order, drop = FALSE]
}
return(mat)
}
cgDists    = cophenetic.phylo( cognacTree )
cgDists    = ClusterMatrix( cgDists, TRUE, TRUE )
geneDists  = cophenetic.phylo( wziTree )
matOrd = sapply( row.names( geneDists ),
function(x) which( row.names( cgDists ) == x )
)
geneDists = geneDists[ order( matOrd ), order( matOrd ) ]
identical( row.names( cgDists ), colnames( geneDists ) )
pheatmap::pheatmap(
geneDists, cluster_rows = FALSE, cluster_cols = FALSE
)
pheatmap::pheatmap(
cgDists, cluster_rows = FALSE, cluster_cols = FALSE
)
pheatmap::pheatmap(
geneDists,
cluster_rows  = FALSE,
cluster_cols  = FALSE,
show_rownames = FALSE,
show_colnames = FALSE
)
pheatmap::pheatmap(
cgDists,
cluster_rows  = FALSE,
cluster_cols  = FALSE,
show_rownames = FALSE,
show_colnames = FALSE
)
load( "../data/2021_03_25_blast_analysis.rData")
setwd("gl/Bachman_CU8/lib/")
load( "../data/2021_03_25_blast_analysis.rData")
faa = sapply( 1:length( blastResuls ), function(j)
{
if ( !length( blastResuls[[j]] ) ) return( NA )
pId = sapply( 1:nrow( blastResuls[[j]] ),
function(i) blastResuls[[j]][ i, N_IDENT ] / wziLen
)
pint( sum( pId > 0.9 ) )
return( blastResuls[[j]][ which.max( pId ), S_SEQ ] )
})
N_IDENT = 6
S_SEQ   = 8
faa = sapply( 1:length( blastResuls ), function(j)
{
if ( !length( blastResuls[[j]] ) ) return( NA )
pId = sapply( 1:nrow( blastResuls[[j]] ),
function(i) blastResuls[[j]][ i, N_IDENT ] / wziLen
)
pint( sum( pId > 0.9 ) )
return( blastResuls[[j]][ which.max( pId ), S_SEQ ] )
})
wziLen = nchar( ParseFasta( "../data/wzi.faa" ) )
faa = sapply( 1:length( blastResuls ), function(j)
{
if ( !length( blastResuls[[j]] ) ) return( NA )
pId = sapply( 1:nrow( blastResuls[[j]] ),
function(i) blastResuls[[j]][ i, N_IDENT ] / wziLen
)
pint( sum( pId > 0.9 ) )
return( blastResuls[[j]][ which.max( pId ), S_SEQ ] )
})
library( cognac )
faa = sapply( 1:length( blastResuls ), function(j)
{
if ( !length( blastResuls[[j]] ) ) return( NA )
pId = sapply( 1:nrow( blastResuls[[j]] ),
function(i) blastResuls[[j]][ i, N_IDENT ] / wziLen
)
pint( sum( pId > 0.9 ) )
return( blastResuls[[j]][ which.max( pId ), S_SEQ ] )
})
wziLen = nchar( ParseFasta( "../data/wzi.faa" ) )
faa = sapply( 1:length( blastResuls ), function(j)
{
if ( !length( blastResuls[[j]] ) ) return( NA )
pId = sapply( 1:nrow( blastResuls[[j]] ),
function(i) blastResuls[[j]][ i, N_IDENT ] / wziLen
)
pint( sum( pId > 0.9 ) )
return( blastResuls[[j]][ which.max( pId ), S_SEQ ] )
})
faa = sapply( 1:length( blastResuls ), function(j)
{
if ( !length( blastResuls[[j]] ) ) return( NA )
pId = sapply( 1:nrow( blastResuls[[j]] ),
function(i) blastResuls[[j]][ i, N_IDENT ] / wziLen
)
print( sum( pId > 0.9 ) )
return( blastResuls[[j]][ which.max( pId ), S_SEQ ] )
})
